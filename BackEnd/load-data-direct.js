import sequelize from './db.js';
import bcrypt from 'bcrypt';

const loadDataDirect = async () => {
  try {
    console.log('üîß Cargando datos de prueba con Sequelize...');
    
    // Conectar a la base de datos
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n a la base de datos establecida.');
    
    console.log('üìã Limpiando datos existentes...');
    // Deshabilitar foreign key checks temporalmente
    await sequelize.query('SET FOREIGN_KEY_CHECKS = 0');
    
    // Limpiar tablas en orden correcto
    await sequelize.query('DELETE FROM turnos');
    await sequelize.query('DELETE FROM estudios'); 
    await sequelize.query('DELETE FROM horarios_disponibles');
    await sequelize.query('DELETE FROM sededoctoresp');
    await sequelize.query('DELETE FROM pacientes');
    await sequelize.query('DELETE FROM doctores');
    await sequelize.query('DELETE FROM usuarios');
    await sequelize.query('DELETE FROM especialidades');
    await sequelize.query('DELETE FROM sedes');
    await sequelize.query('DELETE FROM obrasociales');
    await sequelize.query('DELETE FROM fechas');
    
    // Re-habilitar foreign key checks
    await sequelize.query('SET FOREIGN_KEY_CHECKS = 1');
    
    // 1. OBRAS SOCIALES
    console.log('üìã Cargando obras sociales...');
    await sequelize.query(`
      INSERT INTO obrasociales (idObraSocial, nombre, estado)
      VALUES 
        (1, 'OSDE', 'Habilitado'),
        (2, 'Swiss Medical', 'Habilitado'),
        (3, 'Medicus', 'Habilitado'),
        (4, 'Galeno', 'Habilitado'),
        (5, 'PAMI', 'Habilitado'),
        (6, 'IOMA', 'Habilitado'),
        (7, 'Uni√≥n Personal', 'Habilitado'),
        (8, 'Federada Salud', 'Habilitado'),
        (9, 'Particular', 'Habilitado')
    `);
    
    // 2. SEDES
    console.log('üìã Cargando sedes...');
    await sequelize.query(`
      INSERT INTO sedes (idSede, nombre, direccion, estado)
      VALUES 
        (1, 'Sede Central', 'Av. C√≥rdoba 1234, CABA', 'Habilitado'),
        (2, 'Sede Norte', 'Av. Cabildo 5678, CABA', 'Habilitado'),
        (3, 'Sede Sur', 'Av. Rivadavia 9012, CABA', 'Habilitado'),
        (4, 'Sede Oeste', 'Av. Rivadavia 15000, Mor√≥n', 'Habilitado'),
        (5, 'Sede Este', 'Av. del Libertador 2500, Vicente L√≥pez', 'Habilitado')
    `);
    
    // 3. ESPECIALIDADES
    console.log('üìã Cargando especialidades...');
    await sequelize.query(`
      INSERT INTO especialidades (idEspecialidad, nombre, estado)
      VALUES 
        (1, 'Cardiolog√≠a', 'Habilitado'),
        (2, 'Neurolog√≠a', 'Habilitado'),
        (3, 'Traumatolog√≠a', 'Habilitado'),
        (4, 'Pediatr√≠a', 'Habilitado'),
        (5, 'Ginecolog√≠a', 'Habilitado'),
        (6, 'Medicina General', 'Habilitado'),
        (7, 'Dermatolog√≠a', 'Habilitado'),
        (8, 'Oftalmolog√≠a', 'Habilitado'),
        (9, 'Otorrinolaringolog√≠a', 'Habilitado'),
        (10, 'Psiquiatr√≠a', 'Habilitado')
    `);
    
    // 4. GENERAR FECHAS PARA TODO EL A√ëO 2025
    console.log('üìã Generando fechas para el a√±o 2025...');
    const fechas = [];
    const fechaInicio = new Date('2025-01-01');
    const fechaFin = new Date('2025-12-31');
    
    for (let fecha = new Date(fechaInicio); fecha <= fechaFin; fecha.setDate(fecha.getDate() + 1)) {
      const fechaStr = fecha.toISOString().split('T')[0];
      fechas.push(`('${fechaStr}')`);
    }
    
    // Insertar fechas en lotes para evitar queries muy largos
    const batchSize = 100;
    for (let i = 0; i < fechas.length; i += batchSize) {
      const batch = fechas.slice(i, i + batchSize);
      await sequelize.query(`INSERT INTO fechas (fechas) VALUES ${batch.join(', ')}`);
    }
    console.log(`   ‚úÖ ${fechas.length} fechas generadas para 2025`);
    
    // 5. USUARIOS
    console.log('üìã Cargando usuarios...');
    await sequelize.query(`
      INSERT INTO usuarios (dni, fechaNacimiento, nombre, apellido, telefono, email, direccion, idObraSocial)
      VALUES 
        -- Doctores
        (12345678, '1980-05-15', 'Carlos', 'Rodr√≠guez', '1134567890', 'carlos.rodriguez@hospital.com', 'Av. Santa Fe 1000', 1),
        (23456789, '1975-08-22', 'Mar√≠a', 'Gonz√°lez', '1145678901', 'maria.gonzalez@hospital.com', 'Av. Callao 500', 2),
        (34567890, '1982-12-10', 'Juan', 'L√≥pez', '1156789012', 'juan.lopez@hospital.com', 'Av. Corrientes 800', 3),
        (45678901, '1978-03-18', 'Ana', 'Mart√≠nez', '1167890123', 'ana.martinez@hospital.com', 'Av. 9 de Julio 200', 1),
        (56789012, '1985-11-25', 'Roberto', 'Silva', '1178901234', 'roberto.silva@hospital.com', 'Av. Las Heras 300', 2),
        (67890123, '1979-07-14', 'Patricia', 'Moreno', '1189012345', 'patricia.moreno@hospital.com', 'Av. Belgrano 750', 3),
        (78901234, '1983-09-30', 'Miguel', 'Herrera', '1190123456', 'miguel.herrera@hospital.com', 'Av. Pueyrred√≥n 1200', 4),
        (89012345, '1981-02-28', 'Lucia', 'Vargas', '1101234567', 'lucia.vargas@hospital.com', 'Av. Santa Fe 2500', 5),
        (90123456, '1977-11-12', 'Ricardo', 'Mendoza', '1112345678', 'ricardo.mendoza@hospital.com', 'Av. C√≥rdoba 3000', 1),
        (11223344, '1984-04-06', 'Florencia', 'Castro', '1123456789', 'florencia.castro@hospital.com', 'Av. Rivadavia 1500', 2),
        -- Pacientes
        (87654321, '1990-01-15', 'Laura', 'Fern√°ndez', '1198765432', 'laura.fernandez@email.com', 'Calle Falsa 123', 1),
        (76543210, '1985-06-20', 'Diego', 'P√©rez', '1187654321', 'diego.perez@email.com', 'Av. Belgrano 456', 2),
        (65432109, '1992-09-12', 'Sof√≠a', 'Torres', '1176543210', 'sofia.torres@email.com', 'San Mart√≠n 789', 3),
        (54321098, '1988-04-08', 'Mart√≠n', 'Ruiz', '1165432109', 'martin.ruiz@email.com', 'Mitre 321', 4),
        (43210987, '1995-12-03', 'Valentina', 'Morales', '1154321098', 'valentina.morales@email.com', 'Sarmiento 654', 5),
        (32109876, '1983-07-28', 'Fernando', 'Castro', '1143210987', 'fernando.castro@email.com', 'Alsina 987', 1),
        (21098765, '1991-10-17', 'Camila', 'Ramos', '1132109876', 'camila.ramos@email.com', 'Tucum√°n 159', 2),
        (10987654, '1987-02-14', 'Alejandro', 'Vega', '1121098765', 'alejandro.vega@email.com', 'Entre R√≠os 753', 3),
        (98765432, '1993-05-25', 'Daniela', 'L√≥pez', '1198765431', 'daniela.lopez@email.com', 'Av. Corrientes 2100', 6),
        (86754321, '1989-11-08', 'Sebasti√°n', 'Garc√≠a', '1187654320', 'sebastian.garcia@email.com', 'San Juan 1500', 7),
        (75643210, '1994-03-16', 'Natalia', 'Mart√≠n', '1176543209', 'natalia.martin@email.com', 'Lavalle 800', 8),
        (64532109, '1986-08-30', 'Gonzalo', 'S√°nchez', '1165432108', 'gonzalo.sanchez@email.com', 'Florida 1200', 9),
        (53421098, '1997-01-20', 'Mariana', 'D√≠az', '1154321097', 'mariana.diaz@email.com', 'Paraguay 900', 1),
        (42310987, '1990-12-14', 'Tom√°s', 'Jim√©nez', '1143210986', 'tomas.jimenez@email.com', 'Uruguay 600', 2),
        (31209876, '1985-07-09', 'Agustina', 'Romero', '1132109875', 'agustina.romero@email.com', 'Maip√∫ 1800', 3)
    `);
    
    // 6. DOCTORES con contrase√±as hasheadas
    console.log('üìã Cargando doctores con contrase√±as hasheadas...');
    const passwordHash = await bcrypt.hash('password123', 10);
    await sequelize.query(`
      INSERT INTO doctores (dni, duracionTurno, contra, estado)
      VALUES 
        (12345678, 30, '${passwordHash}', 'Habilitado'),
        (23456789, 45, '${passwordHash}', 'Habilitado'),
        (34567890, 30, '${passwordHash}', 'Habilitado'),
        (45678901, 60, '${passwordHash}', 'Habilitado'),
        (56789012, 30, '${passwordHash}', 'Habilitado'),
        (67890123, 30, '${passwordHash}', 'Habilitado'),
        (78901234, 45, '${passwordHash}', 'Habilitado'),
        (89012345, 30, '${passwordHash}', 'Habilitado'),
        (90123456, 30, '${passwordHash}', 'Habilitado'),
        (11223344, 45, '${passwordHash}', 'Habilitado')
    `);
    
    // 7. PACIENTES
    console.log('üìã Cargando pacientes...');
    await sequelize.query(`
      INSERT INTO pacientes (dni, estado)
      VALUES 
        (87654321, 'Habilitado'),
        (76543210, 'Habilitado'),
        (65432109, 'Habilitado'),
        (54321098, 'Habilitado'),
        (43210987, 'Habilitado'),
        (32109876, 'Habilitado'),
        (21098765, 'Habilitado'),
        (10987654, 'Habilitado'),
        (98765432, 'Habilitado'),
        (86754321, 'Habilitado'),
        (75643210, 'Habilitado'),
        (64532109, 'Habilitado'),
        (53421098, 'Habilitado'),
        (42310987, 'Habilitado'),
        (31209876, 'Habilitado')
    `);
    
    // 8. OBTENER IDS PARA RELACIONES
    console.log('üìã Obteniendo IDs para relaciones...');
    const [doctoresIds] = await sequelize.query('SELECT idDoctor, dni FROM doctores');
    const [pacientesIds] = await sequelize.query('SELECT idPaciente, dni FROM pacientes');
    
    console.log(`   - Doctores encontrados: ${doctoresIds.length}`);
    console.log(`   - Pacientes encontrados: ${pacientesIds.length}`);
    
    const getIdDoctor = (dni) => {
      const doctor = doctoresIds.find(d => d.dni === dni);
      if (!doctor) {
        console.log(`‚ö†Ô∏è  Doctor con DNI ${dni} no encontrado`);
        return null;
      }
      return doctor.idDoctor;
    };
    
    const getIdPaciente = (dni) => {
      const paciente = pacientesIds.find(p => p.dni === dni);
      if (!paciente) {
        console.log(`‚ö†Ô∏è  Paciente con DNI ${dni} no encontrado`);
        return null;
      }
      return paciente.idPaciente;
    };
    
    // 9. RELACI√ìN SEDE-DOCTOR-ESPECIALIDAD
    console.log('üìã Cargando relaciones sede-doctor-especialidad...');
    await sequelize.query(`
      INSERT INTO sededoctoresp (idSede, idDoctor, idEspecialidad, estado)
      VALUES 
        -- Carlos Rodr√≠guez (Cardiolog√≠a)
        (1, ${getIdDoctor(12345678)}, 1, 'Habilitado'),
        (2, ${getIdDoctor(12345678)}, 1, 'Habilitado'),
        -- Mar√≠a Gonz√°lez (Neurolog√≠a)
        (1, ${getIdDoctor(23456789)}, 2, 'Habilitado'),
        (3, ${getIdDoctor(23456789)}, 2, 'Habilitado'),
        -- Juan L√≥pez (Traumatolog√≠a)
        (2, ${getIdDoctor(34567890)}, 3, 'Habilitado'),
        (3, ${getIdDoctor(34567890)}, 3, 'Habilitado'),
        -- Ana Mart√≠nez (Pediatr√≠a)
        (1, ${getIdDoctor(45678901)}, 4, 'Habilitado'),
        (2, ${getIdDoctor(45678901)}, 4, 'Habilitado'),
        -- Roberto Silva (Ginecolog√≠a)
        (2, ${getIdDoctor(56789012)}, 5, 'Habilitado'),
        (3, ${getIdDoctor(56789012)}, 5, 'Habilitado'),
        -- Patricia Moreno (Medicina General)
        (1, ${getIdDoctor(67890123)}, 6, 'Habilitado'),
        (4, ${getIdDoctor(67890123)}, 6, 'Habilitado'),
        -- Miguel Herrera (Dermatolog√≠a)
        (2, ${getIdDoctor(78901234)}, 7, 'Habilitado'),
        (5, ${getIdDoctor(78901234)}, 7, 'Habilitado'),
        -- Lucia Vargas (Oftalmolog√≠a)
        (3, ${getIdDoctor(89012345)}, 8, 'Habilitado'),
        (4, ${getIdDoctor(89012345)}, 8, 'Habilitado'),
        -- Ricardo Mendoza (Otorrinolaringolog√≠a)
        (1, ${getIdDoctor(90123456)}, 9, 'Habilitado'),
        (5, ${getIdDoctor(90123456)}, 9, 'Habilitado'),
        -- Florencia Castro (Psiquiatr√≠a)
        (3, ${getIdDoctor(11223344)}, 10, 'Habilitado'),
        (4, ${getIdDoctor(11223344)}, 10, 'Habilitado')
    `);
    
    // 10. HORARIOS DISPONIBLES (m√°s completos)
    console.log('üìã Cargando horarios disponibles...');
    await sequelize.query(`
      INSERT INTO horarios_disponibles (idSede, idDoctor, idEspecialidad, dia, hora_inicio, hora_fin, estado)
      VALUES 
        -- Carlos Rodr√≠guez - Cardiolog√≠a
        (1, ${getIdDoctor(12345678)}, 1, 'Lunes', '08:00:00', '12:00:00', 'Habilitado'),
        (1, ${getIdDoctor(12345678)}, 1, 'Mi√©rcoles', '14:00:00', '18:00:00', 'Habilitado'),
        (2, ${getIdDoctor(12345678)}, 1, 'Martes', '09:00:00', '13:00:00', 'Habilitado'),
        (2, ${getIdDoctor(12345678)}, 1, 'Viernes', '08:00:00', '12:00:00', 'Habilitado'),
        
        -- Mar√≠a Gonz√°lez - Neurolog√≠a
        (1, ${getIdDoctor(23456789)}, 2, 'Lunes', '09:00:00', '12:00:00', 'Habilitado'),
        (1, ${getIdDoctor(23456789)}, 2, 'Jueves', '15:00:00', '18:00:00', 'Habilitado'),
        (3, ${getIdDoctor(23456789)}, 2, 'Viernes', '08:00:00', '11:00:00', 'Habilitado'),
        (3, ${getIdDoctor(23456789)}, 2, 'Martes', '14:00:00', '17:00:00', 'Habilitado'),
        
        -- Juan L√≥pez - Traumatolog√≠a
        (2, ${getIdDoctor(34567890)}, 3, 'Martes', '08:00:00', '12:00:00', 'Habilitado'),
        (2, ${getIdDoctor(34567890)}, 3, 'Jueves', '14:00:00', '17:00:00', 'Habilitado'),
        (3, ${getIdDoctor(34567890)}, 3, 'Mi√©rcoles', '09:00:00', '12:00:00', 'Habilitado'),
        (3, ${getIdDoctor(34567890)}, 3, 'Lunes', '15:00:00', '18:00:00', 'Habilitado'),
        
        -- Ana Mart√≠nez - Pediatr√≠a
        (1, ${getIdDoctor(45678901)}, 4, 'Lunes', '10:00:00', '14:00:00', 'Habilitado'),
        (1, ${getIdDoctor(45678901)}, 4, 'Mi√©rcoles', '08:00:00', '12:00:00', 'Habilitado'),
        (2, ${getIdDoctor(45678901)}, 4, 'Viernes', '08:00:00', '12:00:00', 'Habilitado'),
        (2, ${getIdDoctor(45678901)}, 4, 'Martes', '14:00:00', '18:00:00', 'Habilitado'),
        
        -- Roberto Silva - Ginecolog√≠a
        (2, ${getIdDoctor(56789012)}, 5, 'Martes', '14:00:00', '18:00:00', 'Habilitado'),
        (2, ${getIdDoctor(56789012)}, 5, 'Jueves', '09:00:00', '13:00:00', 'Habilitado'),
        (3, ${getIdDoctor(56789012)}, 5, 'Lunes', '08:00:00', '12:00:00', 'Habilitado'),
        (3, ${getIdDoctor(56789012)}, 5, 'Viernes', '14:00:00', '17:00:00', 'Habilitado'),
        
        -- Patricia Moreno - Medicina General
        (1, ${getIdDoctor(67890123)}, 6, 'Lunes', '08:00:00', '12:00:00', 'Habilitado'),
        (1, ${getIdDoctor(67890123)}, 6, 'Mi√©rcoles', '14:00:00', '18:00:00', 'Habilitado'),
        (4, ${getIdDoctor(67890123)}, 6, 'Martes', '08:00:00', '12:00:00', 'Habilitado'),
        (4, ${getIdDoctor(67890123)}, 6, 'Jueves', '14:00:00', '18:00:00', 'Habilitado'),
        
        -- Miguel Herrera - Dermatolog√≠a
        (2, ${getIdDoctor(78901234)}, 7, 'Lunes', '09:00:00', '12:00:00', 'Habilitado'),
        (2, ${getIdDoctor(78901234)}, 7, 'Mi√©rcoles', '15:00:00', '18:00:00', 'Habilitado'),
        (5, ${getIdDoctor(78901234)}, 7, 'Viernes', '08:00:00', '11:00:00', 'Habilitado'),
        (5, ${getIdDoctor(78901234)}, 7, 'Martes', '14:00:00', '17:00:00', 'Habilitado'),
        
        -- Lucia Vargas - Oftalmolog√≠a
        (3, ${getIdDoctor(89012345)}, 8, 'Martes', '08:00:00', '12:00:00', 'Habilitado'),
        (3, ${getIdDoctor(89012345)}, 8, 'Jueves', '14:00:00', '17:00:00', 'Habilitado'),
        (4, ${getIdDoctor(89012345)}, 8, 'Lunes', '09:00:00', '12:00:00', 'Habilitado'),
        (4, ${getIdDoctor(89012345)}, 8, 'Viernes', '15:00:00', '18:00:00', 'Habilitado'),
        
        -- Ricardo Mendoza - Otorrinolaringolog√≠a
        (1, ${getIdDoctor(90123456)}, 9, 'Mi√©rcoles', '08:00:00', '12:00:00', 'Habilitado'),
        (1, ${getIdDoctor(90123456)}, 9, 'Viernes', '14:00:00', '18:00:00', 'Habilitado'),
        (5, ${getIdDoctor(90123456)}, 9, 'Lunes', '08:00:00', '12:00:00', 'Habilitado'),
        (5, ${getIdDoctor(90123456)}, 9, 'Jueves', '14:00:00', '17:00:00', 'Habilitado'),
        
        -- Florencia Castro - Psiquiatr√≠a
        (3, ${getIdDoctor(11223344)}, 10, 'Martes', '09:00:00', '12:00:00', 'Habilitado'),
        (3, ${getIdDoctor(11223344)}, 10, 'Jueves', '15:00:00', '18:00:00', 'Habilitado'),
        (4, ${getIdDoctor(11223344)}, 10, 'Lunes', '08:00:00', '11:00:00', 'Habilitado'),
        (4, ${getIdDoctor(11223344)}, 10, 'Viernes', '14:00:00', '17:00:00', 'Habilitado')
    `);
    
    // 11. TURNOS DE EJEMPLO
    console.log('üìã Cargando turnos de ejemplo...');
    await sequelize.query(`
      INSERT INTO turnos (idPaciente, fechaYHora, fechaCancelacion, fechaConfirmacion, estado, idEspecialidad, idDoctor, idSede, mail)
      VALUES 
        -- Turnos futuros pr√≥ximos (julio 2025)
        (${getIdPaciente(87654321)}, '2025-07-01 10:00:00', NULL, '2025-06-29 15:30:00', 'Confirmado', 1, ${getIdDoctor(12345678)}, 1, NULL),
        (${getIdPaciente(76543210)}, '2025-07-01 09:30:00', NULL, NULL, 'Pendiente', 2, ${getIdDoctor(23456789)}, 1, NULL),
        (${getIdPaciente(65432109)}, '2025-07-02 14:00:00', NULL, NULL, 'Pendiente', 3, ${getIdDoctor(34567890)}, 2, NULL),
        (${getIdPaciente(54321098)}, '2025-07-02 11:00:00', NULL, NULL, 'Pendiente', 4, ${getIdDoctor(45678901)}, 1, NULL),
        (${getIdPaciente(43210987)}, '2025-07-03 16:30:00', NULL, NULL, 'Pendiente', 5, ${getIdDoctor(56789012)}, 2, NULL),
        (${getIdPaciente(98765432)}, '2025-07-03 08:30:00', NULL, '2025-07-01 10:15:00', 'Confirmado', 6, ${getIdDoctor(67890123)}, 1, NULL),
        (${getIdPaciente(86754321)}, '2025-07-04 15:00:00', NULL, NULL, 'Pendiente', 7, ${getIdDoctor(78901234)}, 2, NULL),
        (${getIdPaciente(75643210)}, '2025-07-04 10:30:00', NULL, '2025-07-02 14:45:00', 'Confirmado', 8, ${getIdDoctor(89012345)}, 3, NULL),
        (${getIdPaciente(64532109)}, '2025-07-05 11:30:00', NULL, NULL, 'Pendiente', 9, ${getIdDoctor(90123456)}, 1, NULL),
        (${getIdPaciente(53421098)}, '2025-07-05 16:00:00', NULL, NULL, 'Pendiente', 10, ${getIdDoctor(11223344)}, 3, NULL),
        
        -- M√°s turnos futuros (segunda semana de julio)
        (${getIdPaciente(42310987)}, '2025-07-08 09:00:00', NULL, NULL, 'Pendiente', 1, ${getIdDoctor(12345678)}, 2, NULL),
        (${getIdPaciente(31209876)}, '2025-07-08 14:30:00', NULL, NULL, 'Pendiente', 2, ${getIdDoctor(23456789)}, 3, NULL),
        (${getIdPaciente(32109876)}, '2025-07-09 08:00:00', NULL, '2025-07-07 16:20:00', 'Confirmado', 3, ${getIdDoctor(34567890)}, 2, NULL),
        (${getIdPaciente(21098765)}, '2025-07-09 15:30:00', NULL, NULL, 'Pendiente', 4, ${getIdDoctor(45678901)}, 1, NULL),
        (${getIdPaciente(10987654)}, '2025-07-10 10:00:00', NULL, '2025-07-08 11:45:00', 'Confirmado', 5, ${getIdDoctor(56789012)}, 3, NULL),
        
        -- Turnos pasados (junio 2025 - para historial)
        (${getIdPaciente(87654321)}, '2025-06-20 11:00:00', NULL, '2025-06-18 10:00:00', 'Completado', 1, ${getIdDoctor(12345678)}, 2, NULL),
        (${getIdPaciente(76543210)}, '2025-06-22 16:30:00', NULL, '2025-06-20 14:15:00', 'Completado', 2, ${getIdDoctor(23456789)}, 3, NULL),
        (${getIdPaciente(65432109)}, '2025-06-15 08:30:00', NULL, '2025-06-12 09:45:00', 'Completado', 3, ${getIdDoctor(34567890)}, 2, NULL),
        (${getIdPaciente(54321098)}, '2025-06-10 14:00:00', NULL, '2025-06-08 16:20:00', 'Completado', 4, ${getIdDoctor(45678901)}, 1, NULL),
        (${getIdPaciente(43210987)}, '2025-06-05 09:00:00', NULL, '2025-06-03 11:30:00', 'Completado', 5, ${getIdDoctor(56789012)}, 3, NULL),
        (${getIdPaciente(98765432)}, '2025-06-18 10:30:00', NULL, '2025-06-16 15:45:00', 'Completado', 6, ${getIdDoctor(67890123)}, 4, NULL),
        (${getIdPaciente(86754321)}, '2025-06-12 16:00:00', NULL, '2025-06-10 12:30:00', 'Completado', 7, ${getIdDoctor(78901234)}, 2, NULL),
        (${getIdPaciente(75643210)}, '2025-06-25 11:30:00', NULL, '2025-06-23 14:15:00', 'Completado', 8, ${getIdDoctor(89012345)}, 4, NULL),
        (${getIdPaciente(64532109)}, '2025-06-08 09:45:00', NULL, '2025-06-06 16:50:00', 'Completado', 9, ${getIdDoctor(90123456)}, 5, NULL),
        (${getIdPaciente(53421098)}, '2025-06-14 15:15:00', NULL, '2025-06-12 10:25:00', 'Completado', 10, ${getIdDoctor(11223344)}, 3, NULL),
        
        -- Turnos cancelados (ejemplos)
        (${getIdPaciente(42310987)}, '2025-06-28 10:00:00', '2025-06-27 09:30:00', NULL, 'Cancelado', 1, ${getIdDoctor(12345678)}, 1, NULL),
        (${getIdPaciente(31209876)}, '2025-06-26 14:30:00', '2025-06-25 15:45:00', NULL, 'Cancelado', 2, ${getIdDoctor(23456789)}, 1, NULL),
        (${getIdPaciente(32109876)}, '2025-06-24 16:00:00', '2025-06-23 11:20:00', NULL, 'Cancelado', 6, ${getIdDoctor(67890123)}, 4, NULL)
    `);
    
    // 12. ESTUDIOS DE EJEMPLO
    console.log('üìã Cargando estudios de ejemplo...');
    await sequelize.query(`
      INSERT INTO estudios (idPaciente, idDoctor, fechaRealizacion, fechaCarga, nombreArchivo, rutaArchivo, descripcion)
      VALUES 
        -- Estudios de Laura Fern√°ndez (Cardiolog√≠a)
        (${getIdPaciente(87654321)}, ${getIdDoctor(12345678)}, '2025-06-20', NOW(), 'electrocardiograma_laura_20250620.pdf', 'files/estudios/electrocardiograma_laura_20250620.pdf', 'Electrocardiograma de rutina - Resultados normales'),
        (${getIdPaciente(87654321)}, ${getIdDoctor(12345678)}, '2025-06-15', NOW(), 'ecocardiograma_laura_20250615.pdf', 'files/estudios/ecocardiograma_laura_20250615.pdf', 'Ecocardiograma Doppler - Funci√≥n card√≠aca normal'),
        (${getIdPaciente(87654321)}, ${getIdDoctor(12345678)}, '2025-06-10', NOW(), 'holter_laura_20250610.pdf', 'files/estudios/holter_laura_20250610.pdf', 'Holter 24hs - Ritmo sinusal normal'),
        
        -- Estudios de Diego P√©rez (Neurolog√≠a)
        (${getIdPaciente(76543210)}, ${getIdDoctor(23456789)}, '2025-06-18', NOW(), 'resonancia_cerebral_diego_20250618.pdf', 'files/estudios/resonancia_cerebral_diego_20250618.pdf', 'Resonancia magn√©tica cerebral - Sin alteraciones'),
        (${getIdPaciente(76543210)}, ${getIdDoctor(23456789)}, '2025-06-10', NOW(), 'electroencefalograma_diego_20250610.pdf', 'files/estudios/electroencefalograma_diego_20250610.pdf', 'Electroencefalograma - Actividad normal'),
        (${getIdPaciente(76543210)}, ${getIdDoctor(23456789)}, '2025-06-05', NOW(), 'tomografia_cerebral_diego_20250605.pdf', 'files/estudios/tomografia_cerebral_diego_20250605.pdf', 'TAC cerebral - Estructuras normales'),
        
        -- Estudios de Sof√≠a Torres (Traumatolog√≠a)
        (${getIdPaciente(65432109)}, ${getIdDoctor(34567890)}, '2025-06-22', NOW(), 'radiografia_rodilla_sofia_20250622.jpg', 'files/estudios/radiografia_rodilla_sofia_20250622.jpg', 'Radiograf√≠a de rodilla izquierda - Lesi√≥n meniscal'),
        (${getIdPaciente(65432109)}, ${getIdDoctor(34567890)}, '2025-06-16', NOW(), 'resonancia_rodilla_sofia_20250616.pdf', 'files/estudios/resonancia_rodilla_sofia_20250616.pdf', 'Resonancia magn√©tica de rodilla - Confirma lesi√≥n meniscal'),
        (${getIdPaciente(65432109)}, ${getIdDoctor(34567890)}, '2025-06-12', NOW(), 'radiografia_columna_sofia_20250612.jpg', 'files/estudios/radiografia_columna_sofia_20250612.jpg', 'Radiograf√≠a de columna lumbar - Sin alteraciones'),
        
        -- Estudios de Mart√≠n Ruiz (Pediatr√≠a)
        (${getIdPaciente(54321098)}, ${getIdDoctor(45678901)}, '2025-06-20', NOW(), 'analisis_sangre_martin_20250620.pdf', 'files/estudios/analisis_sangre_martin_20250620.pdf', 'An√°lisis de sangre completo - Valores normales'),
        (${getIdPaciente(54321098)}, ${getIdDoctor(45678901)}, '2025-06-12', NOW(), 'radiografia_torax_martin_20250612.jpg', 'files/estudios/radiografia_torax_martin_20250612.jpg', 'Radiograf√≠a de t√≥rax - Sin alteraciones'),
        
        -- Estudios de Valentina Morales (Ginecolog√≠a)
        (${getIdPaciente(43210987)}, ${getIdDoctor(56789012)}, '2025-06-25', NOW(), 'ecografia_pelvica_valentina_20250625.pdf', 'files/estudios/ecografia_pelvica_valentina_20250625.pdf', 'Ecograf√≠a p√©lvica - Estudio ginecol√≥gico normal'),
        (${getIdPaciente(43210987)}, ${getIdDoctor(56789012)}, '2025-06-14', NOW(), 'mamografia_valentina_20250614.pdf', 'files/estudios/mamografia_valentina_20250614.pdf', 'Mamograf√≠a de control - Sin hallazgos patol√≥gicos'),
        (${getIdPaciente(43210987)}, ${getIdDoctor(56789012)}, '2025-06-08', NOW(), 'papanicolaou_valentina_20250608.pdf', 'files/estudios/papanicolaou_valentina_20250608.pdf', 'Papanicolaou - Resultado normal'),
        
        -- Estudios de Daniela L√≥pez (Medicina General)
        (${getIdPaciente(98765432)}, ${getIdDoctor(67890123)}, '2025-06-18', NOW(), 'analisis_completo_daniela_20250618.pdf', 'files/estudios/analisis_completo_daniela_20250618.pdf', 'An√°lisis cl√≠nico completo - Valores dentro de rango normal'),
        (${getIdPaciente(98765432)}, ${getIdDoctor(67890123)}, '2025-06-10', NOW(), 'electrocardiograma_daniela_20250610.pdf', 'files/estudios/electrocardiograma_daniela_20250610.pdf', 'ECG de rutina - Sin alteraciones'),
        
        -- Estudios de Sebasti√°n Garc√≠a (Dermatolog√≠a)
        (${getIdPaciente(86754321)}, ${getIdDoctor(78901234)}, '2025-06-12', NOW(), 'biopsia_piel_sebastian_20250612.pdf', 'files/estudios/biopsia_piel_sebastian_20250612.pdf', 'Biopsia de lesi√≥n cut√°nea - Benigna'),
        (${getIdPaciente(86754321)}, ${getIdDoctor(78901234)}, '2025-06-05', NOW(), 'dermatoscopia_sebastian_20250605.jpg', 'files/estudios/dermatoscopia_sebastian_20250605.jpg', 'Dermatoscop√≠a - Nevus benigno'),
        
        -- Estudios de Natalia Mart√≠n (Oftalmolog√≠a)
        (${getIdPaciente(75643210)}, ${getIdDoctor(89012345)}, '2025-06-25', NOW(), 'campimetria_natalia_20250625.pdf', 'files/estudios/campimetria_natalia_20250625.pdf', 'Campo visual - Normal'),
        (${getIdPaciente(75643210)}, ${getIdDoctor(89012345)}, '2025-06-18', NOW(), 'tomografia_ocular_natalia_20250618.pdf', 'files/estudios/tomografia_ocular_natalia_20250618.pdf', 'OCT retiniano - Sin alteraciones'),
        (${getIdPaciente(75643210)}, ${getIdDoctor(89012345)}, '2025-06-10', NOW(), 'fondo_ojo_natalia_20250610.jpg', 'files/estudios/fondo_ojo_natalia_20250610.jpg', 'Fondo de ojo - Retina normal'),
        
        -- Estudios de Gonzalo S√°nchez (Otorrinolaringolog√≠a)
        (${getIdPaciente(64532109)}, ${getIdDoctor(90123456)}, '2025-06-08', NOW(), 'audiometria_gonzalo_20250608.pdf', 'files/estudios/audiometria_gonzalo_20250608.pdf', 'Audiometr√≠a - Audici√≥n normal'),
        (${getIdPaciente(64532109)}, ${getIdDoctor(90123456)}, '2025-06-15', NOW(), 'timpanometria_gonzalo_20250615.pdf', 'files/estudios/timpanometria_gonzalo_20250615.pdf', 'Timpanometr√≠a - Funci√≥n timp√°nica normal'),
        
        -- Estudios de Mariana D√≠az (Psiquiatr√≠a)
        (${getIdPaciente(53421098)}, ${getIdDoctor(11223344)}, '2025-06-14', NOW(), 'evaluacion_psicologica_mariana_20250614.pdf', 'files/estudios/evaluacion_psicologica_mariana_20250614.pdf', 'Evaluaci√≥n psicol√≥gica - Sin alteraciones significativas'),
        (${getIdPaciente(53421098)}, ${getIdDoctor(11223344)}, '2025-06-20', NOW(), 'test_cognitivo_mariana_20250620.pdf', 'files/estudios/test_cognitivo_mariana_20250620.pdf', 'Test cognitivo - Funciones preservadas'),
        
        -- Estudios adicionales
        (${getIdPaciente(42310987)}, ${getIdDoctor(12345678)}, '2025-06-22', NOW(), 'ergometria_tomas_20250622.pdf', 'files/estudios/ergometria_tomas_20250622.pdf', 'Ergometr√≠a - Capacidad funcional normal'),
        (${getIdPaciente(31209876)}, ${getIdDoctor(23456789)}, '2025-06-16', NOW(), 'doppler_carotideo_agustina_20250616.pdf', 'files/estudios/doppler_carotideo_agustina_20250616.pdf', 'Doppler carot√≠deo - Flujo normal'),
        (${getIdPaciente(32109876)}, ${getIdDoctor(34567890)}, '2025-06-19', NOW(), 'densitometria_fernando_20250619.pdf', 'files/estudios/densitometria_fernando_20250619.pdf', 'Densitometr√≠a √≥sea - Densidad normal para la edad')
    `);
    
    // Verificar datos cargados
    console.log('\nüìä Verificando datos cargados:');
    
    const [obras] = await sequelize.query('SELECT COUNT(*) as count FROM obrasociales');
    console.log(`   ‚úÖ Obras sociales: ${obras[0].count}`);
    
    const [sedes] = await sequelize.query('SELECT COUNT(*) as count FROM sedes');
    console.log(`   ‚úÖ Sedes: ${sedes[0].count}`);
    
    const [especialidades] = await sequelize.query('SELECT COUNT(*) as count FROM especialidades');
    console.log(`   ‚úÖ Especialidades: ${especialidades[0].count}`);
    
    const [fechasCount] = await sequelize.query('SELECT COUNT(*) as count FROM fechas');
    console.log(`   ‚úÖ Fechas: ${fechasCount[0].count}`);
    
    const [usuarios] = await sequelize.query('SELECT COUNT(*) as count FROM usuarios');
    console.log(`   ‚úÖ Usuarios: ${usuarios[0].count}`);
    
    const [doctores] = await sequelize.query('SELECT COUNT(*) as count FROM doctores');
    console.log(`   ‚úÖ Doctores: ${doctores[0].count}`);
    
    const [pacientes] = await sequelize.query('SELECT COUNT(*) as count FROM pacientes');
    console.log(`   ‚úÖ Pacientes: ${pacientes[0].count}`);
    
    const [relaciones] = await sequelize.query('SELECT COUNT(*) as count FROM sededoctoresp');
    console.log(`   ‚úÖ Relaciones sede-doctor-especialidad: ${relaciones[0].count}`);
    
    const [horarios] = await sequelize.query('SELECT COUNT(*) as count FROM horarios_disponibles');
    console.log(`   ‚úÖ Horarios disponibles: ${horarios[0].count}`);
    
    const [turnos] = await sequelize.query('SELECT COUNT(*) as count FROM turnos');
    console.log(`   ‚úÖ Turnos: ${turnos[0].count}`);
    
    const [estudios] = await sequelize.query('SELECT COUNT(*) as count FROM estudios');
    console.log(`   ‚úÖ Estudios: ${estudios[0].count}`);
    
    console.log('\nüéâ ¬°Base de datos completa cargada exitosamente!');
    console.log('üí° Credenciales para pruebas:');
    console.log('üìã Doctores por especialidad:');
    console.log('   ü´Ä Cardiolog√≠a:');
    console.log('      - Dr. Carlos Rodr√≠guez: DNI 12345678, password: password123');
    console.log('   üß† Neurolog√≠a:');
    console.log('      - Dra. Mar√≠a Gonz√°lez: DNI 23456789, password: password123');
    console.log('   ü¶¥ Traumatolog√≠a:');
    console.log('      - Dr. Juan L√≥pez: DNI 34567890, password: password123');
    console.log('   üë∂ Pediatr√≠a:');
    console.log('      - Dra. Ana Mart√≠nez: DNI 45678901, password: password123');
    console.log('   ü§± Ginecolog√≠a:');
    console.log('      - Dr. Roberto Silva: DNI 56789012, password: password123');
    console.log('   ü©∫ Medicina General:');
    console.log('      - Dra. Patricia Moreno: DNI 67890123, password: password123');
    console.log('   üî¨ Dermatolog√≠a:');
    console.log('      - Dr. Miguel Herrera: DNI 78901234, password: password123');
    console.log('   üëÅÔ∏è Oftalmolog√≠a:');
    console.log('      - Dra. Lucia Vargas: DNI 89012345, password: password123');
    console.log('   üëÇ Otorrinolaringolog√≠a:');
    console.log('      - Dr. Ricardo Mendoza: DNI 90123456, password: password123');
    console.log('   üß† Psiquiatr√≠a:');
    console.log('      - Dra. Florencia Castro: DNI 11223344, password: password123');
    console.log('üìã Pacientes (ejemplos):');
    console.log('   - Laura Fern√°ndez: DNI 87654321 (OSDE)');
    console.log('   - Diego P√©rez: DNI 76543210 (Swiss Medical)');
    console.log('   - Sof√≠a Torres: DNI 65432109 (Medicus)');
    console.log('   - Mart√≠n Ruiz: DNI 54321098 (Galeno)');
    console.log('   - Valentina Morales: DNI 43210987 (PAMI)');
    console.log('   - Daniela L√≥pez: DNI 98765432 (IOMA)');
    console.log('   - Sebasti√°n Garc√≠a: DNI 86754321 (Uni√≥n Personal)');
    console.log('   - Natalia Mart√≠n: DNI 75643210 (Federada Salud)');
    console.log('   - Gonzalo S√°nchez: DNI 64532109 (Particular)');
    console.log('üìÖ Fechas disponibles: Todo el a√±o 2025 (365 fechas)');
    console.log('üè• Datos disponibles:');
    console.log('   - 9 obras sociales');
    console.log('   - 5 sedes m√©dicas');
    console.log('   - 10 especialidades m√©dicas');
    console.log('   - 10 doctores especialistas');
    console.log('   - 15 pacientes activos');
    console.log('   - Turnos pasados, futuros y cancelados');
    console.log('   - 27 estudios m√©dicos de ejemplo');
    console.log('   - Horarios completos para todos los doctores');
    console.log('üîß Sistema listo para pruebas completas de todas las funcionalidades');
    
  } catch (error) {
    console.error('‚ùå Error cargando datos:', error.message);
    console.error('üí° Stack:', error.stack);
  } finally {
    await sequelize.close();
  }
};

loadDataDirect();